#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('hoge:server');
const http = require('http');
const server = http.Server(app);
const socketIO = require('socket.io');
const io = socketIO(server);

const playerInfos = {};

// クライアントサイドとの通信
io.on('connection', socket => {

  // ユーザー情報登録
  socket.on('name', playerInfo => {
    console.log(`socket id: ${socket.id}, id: ${playerInfo.id} , name: ${playerInfo.loginName}`);
    if (playerInfos[socket.id]) {
      return;
    }
    socket.broadcast.emit('name', playerInfo);

    for (var i in playerInfos) {
      var otherPlayerInfo = playerInfos[i];
      console.log(`otherPlayerInfo id: ${otherPlayerInfo.id}, name: ${otherPlayerInfo.loginName}`);
      socket.broadcast.emit('name', otherPlayerInfo);
    }

    playerInfos[socket.id] = playerInfo;
  });


  // ジャンプ
  socket.on('pushUp01', pos => {
    var playerInfo = playerInfos[socket.id];
    if (!playerInfo) {
      return;
    }

    playerInfo.x = pos.x;
    playerInfo.y = pos.y;
    playerInfo.frame = pos.frame;

    // console.log(`id: ${playerInfo.id}, name: ${playerInfo.loginName}, x: ${playerInfo.y}, frame: ${playerInfo.frame}`);
    socket.broadcast.emit('pushUp01:' + playerInfo.id, pos);
  });

  // 右に移動
  socket.on('pushRight01', pos => {
    var playerInfo = playerInfos[socket.id];
    if (!playerInfo) {
      return;
    }
    console.log(`id: ${playerInfo.id}, name: ${playerInfo.loginName}, x: ${playerInfo.x}, frame: ${playerInfo.frame}`);

    playerInfo.x = pos.x;
    playerInfo.y = pos.y;
    playerInfo.frame = pos.frame;

    socket.broadcast.emit('pushRight01:' + playerInfo.id, pos);
  });

  socket.on('pushDown01', pos => {
    var playerInfo = playerInfos[socket.id];
    if (!playerInfo) {
      return;
    }

    playerInfo.x = pos.x;
    playerInfo.y = pos.y;
    playerInfo.frame = pos.frame;

    socket.broadcast.emit('pushDown01:' + playerInfo.id, pos);
  });

  // 左移動
  socket.on('pushLeft01', pos => {
    var playerInfo = playerInfos[socket.id];
    if (!playerInfo) {
      return;
    }
    console.log(`id: ${playerInfo.id}, name: ${playerInfo.loginName}, x: ${playerInfo.x}, frame: ${playerInfo.frame}`);

    playerInfo.x = pos.x;
    playerInfo.y = pos.y;
    playerInfo.frame = pos.frame;

    socket.broadcast.emit('pushLeft01:' + playerInfo.id, pos);
  });

});

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

server.listen(app.get('port'), function() {
  console.log('listening!');
});


/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
